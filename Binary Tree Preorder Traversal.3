//iteration version. Stack stores the running node
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        if ( root == null)
            return list;
        stack.push(root);
        while( !stack.isEmpty())
        {
            TreeNode cur = stack.pop();
            list.add(cur.val);
            
            if ( cur.right != null)
                stack.push(cur.right);
            if ( cur.left != null)
                stack.push(cur.left);
        }

        return list;
    }
}
//This problem is easy to get TLE. Pay attention when performing dfs, pruning some branches.Pruning branch needs a simple dp
 class Solution {

    public List<String> wordBreak(String s, Set<String> dict) {  

        List<String> lists = new ArrayList<String>();

        if(s == null || dict.isEmpty())

            return lists;

        ArrayList<String> list = new ArrayList<String>();

        int len = s.length();

        boolean[] dp = new boolean[len+1];//dp[i] means substring from i to len-1 is breakable 

        dp[len] = true;

        for(int i = len-1; i >= 0; i--)

        {

            for(int j = len; j > i; j--)

            {

                if(dp[j] && dict.contains(s.substring(i,j)))

                {

                    dp[i] = true;

                    break;

                }

            }

        }

        find(s,dict,lists,list,0,dp);

        return lists;

    }

    public void find(String s, Set<String> dict,List<String> lists, ArrayList<String> list,int start,boolean[] dp)

    {

        if(start == s.length())

        {

            StringBuilder sb = new StringBuilder();

            for(int i = 0; i < list.size()-1; i++)

            {

                sb.append(list.get(i)+" ");

            }

            sb.append(list.get(list.size()-1));

            lists.add(sb.toString());

            return;

        }

        for(int i = start; i < s.length(); i++)

        {

            if(dp[i+1] && dict.contains(s.substring(start,i+1)))//pruning branch

            {

                list.add(s.substring(start,i+1));

                find(s,dict,lists,list,i+1,dp);

                list.remove(list.size()-1);

            }

        }

    }

}

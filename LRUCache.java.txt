//using doublelinkedlist to implement the least recent order, using hashmap to let the get() set() time complexity to be O(1)
public class LRUCache {
    public class Node
    {
        Node pre;
        Node next;
        int key;
        int value;
        public Node(int key, int value)
        {
            pre = null;
            next = null;
            this.key = key;
            this.value = value;
        }
    }
    
    int capacity;
    Node head;
    Node tail;
    HashMap<Integer,Node> map = new HashMap<Integer,Node>();
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        head = new Node(-1,-1); //add two invalid head and tail to make the addToTail function more easy to implement
        tail = new Node(-1,-1);
        head.next = tail;
        tail.pre = head;
    }
    
    public void addToTail(Node node)
    {
        node.next = tail;
        tail.pre.next = node;
        node.pre = tail.pre;
        tail.pre = node;
    }
    
    public int get(int key) {
        if(!map.containsKey(key))
            return -1;
        Node node = map.get(key);
        node.pre.next = node.next;
        node.next.pre = node.pre;
        addToTail(node);
        return node.value;
    }
    
    public void set(int key, int value) {
        if(get(key) != -1)  //here use get(key) instead of map.containsKey. important!
        {
            map.get(key).value = value;
            return;
        }
            Node node = new Node(key,value);
            if(map.size() == capacity)
            {
                map.remove(head.next.key);
                head.next = head.next.next;
                head.next.pre = head;
            }
                addToTail(node);
                map.put(key,node);
    }
}
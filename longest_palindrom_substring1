//DP time O(n2) space O(n2)
public class Solution {
    public String longestPalindrome(String s) {
      String str = new String();
      if(s == null || s.length() == 0) 
        return str;
      int len = s.length();
      boolean[][] check = new boolean[len][len];
      int max = 0;
      int start = 0;
      int end = 0;
      for(int i = len-1; i >= 0; i--)
      {
          for(int j = i; j < len; j++)
          {
              if(((j-i) < 3 || check[i+1][j-1] ) && s.charAt(i) == s.charAt(j))
              {
                  check[i][j] = true;
              }
              if(check[i][j])
              {
                  if((j-i) >= max)
                  {
                      start = i;
                      end = j;
                      max = j-i;
                  }
              }
              
          }
      }
      return s.substring(start,end+1);
    }
}
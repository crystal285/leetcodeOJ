/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public class Solution {
    public int maxPoints(Point[] points) {
        if (points.length <= 1)
        return points.length;
        int max = 1;
        HashMap<Double, Integer> map = null;
        for(Point p : points)
        {
            int dup = 0;
            map = new HashMap<Double,Integer>();
            for(Point pi : points)
            {
                if(p.x == pi.x && p.y == pi.y)
                {
                  dup++;  
                  continue;  
                }
                    
                double slope = Double.NaN;
                if(p.x != pi.x)
                    slope = 0.0 + (double)(pi.y-p.y)/(pi.x-p.x); // double -0.0 and 0.0 is not the same
                if(!map.containsKey(slope))
                {
                    map.put(slope,1);
                }
                else
                {
                    map.put(slope,map.get(slope)+1);
                }
                
            }
            if(map.size() == 0) // pay attention to the special case
                max = dup;
            else
            {
            for(int temp : map.values())
            {
                if(max < temp + dup)
                    max = temp  + dup;
            }
            }
        }
        return max;
    }
}